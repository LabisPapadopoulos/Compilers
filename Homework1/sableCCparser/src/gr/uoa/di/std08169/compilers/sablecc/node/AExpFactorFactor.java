/* This file was generated by SableCC (http://www.sablecc.org/). */

package gr.uoa.di.std08169.compilers.sablecc.node;

import gr.uoa.di.std08169.compilers.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AExpFactorFactor extends PFactor
{
    private TLeftParenthesis _leftParenthesis_;
    private PExp _exp_;
    private TRightParenthesis _rightParenthesis_;

    public AExpFactorFactor()
    {
        // Constructor
    }

    public AExpFactorFactor(
        @SuppressWarnings("hiding") TLeftParenthesis _leftParenthesis_,
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") TRightParenthesis _rightParenthesis_)
    {
        // Constructor
        setLeftParenthesis(_leftParenthesis_);

        setExp(_exp_);

        setRightParenthesis(_rightParenthesis_);

    }

    @Override
    public Object clone()
    {
        return new AExpFactorFactor(
            cloneNode(this._leftParenthesis_),
            cloneNode(this._exp_),
            cloneNode(this._rightParenthesis_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExpFactorFactor(this);
    }

    public TLeftParenthesis getLeftParenthesis()
    {
        return this._leftParenthesis_;
    }

    public void setLeftParenthesis(TLeftParenthesis node)
    {
        if(this._leftParenthesis_ != null)
        {
            this._leftParenthesis_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._leftParenthesis_ = node;
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public TRightParenthesis getRightParenthesis()
    {
        return this._rightParenthesis_;
    }

    public void setRightParenthesis(TRightParenthesis node)
    {
        if(this._rightParenthesis_ != null)
        {
            this._rightParenthesis_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rightParenthesis_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._leftParenthesis_)
            + toString(this._exp_)
            + toString(this._rightParenthesis_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._leftParenthesis_ == child)
        {
            this._leftParenthesis_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._rightParenthesis_ == child)
        {
            this._rightParenthesis_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._leftParenthesis_ == oldChild)
        {
            setLeftParenthesis((TLeftParenthesis) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._rightParenthesis_ == oldChild)
        {
            setRightParenthesis((TRightParenthesis) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
