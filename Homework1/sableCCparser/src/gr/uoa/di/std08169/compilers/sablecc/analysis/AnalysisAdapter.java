/* This file was generated by SableCC (http://www.sablecc.org/). */

package gr.uoa.di.std08169.compilers.sablecc.analysis;

import java.util.*;
import gr.uoa.di.std08169.compilers.sablecc.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAExpExp(AExpExp node)
    {
        defaultCase(node);
    }

    public void caseAPlusExp2Exp2(APlusExp2Exp2 node)
    {
        defaultCase(node);
    }

    public void caseAMinusExp2Exp2(AMinusExp2Exp2 node)
    {
        defaultCase(node);
    }

    public void caseAEmptyExp2Exp2(AEmptyExp2Exp2 node)
    {
        defaultCase(node);
    }

    public void caseATermTerm(ATermTerm node)
    {
        defaultCase(node);
    }

    public void caseAMultTerm2Term2(AMultTerm2Term2 node)
    {
        defaultCase(node);
    }

    public void caseADivTerm2Term2(ADivTerm2Term2 node)
    {
        defaultCase(node);
    }

    public void caseAEmptyTerm2Term2(AEmptyTerm2Term2 node)
    {
        defaultCase(node);
    }

    public void caseANumFactorFactor(ANumFactorFactor node)
    {
        defaultCase(node);
    }

    public void caseAExpFactorFactor(AExpFactorFactor node)
    {
        defaultCase(node);
    }

    public void caseTNum(TNum node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    public void caseTLeftParenthesis(TLeftParenthesis node)
    {
        defaultCase(node);
    }

    public void caseTRightParenthesis(TRightParenthesis node)
    {
        defaultCase(node);
    }

    public void caseTWhitespace(TWhitespace node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
