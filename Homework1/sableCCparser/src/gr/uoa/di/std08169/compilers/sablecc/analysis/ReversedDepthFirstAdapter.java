/* This file was generated by SableCC (http://www.sablecc.org/). */

package gr.uoa.di.std08169.compilers.sablecc.analysis;

import java.util.*;
import gr.uoa.di.std08169.compilers.sablecc.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPExp().apply(this);
        outStart(node);
    }

    public void inAExpExp(AExpExp node)
    {
        defaultIn(node);
    }

    public void outAExpExp(AExpExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpExp(AExpExp node)
    {
        inAExpExp(node);
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAExpExp(node);
    }

    public void inAPlusExp2Exp2(APlusExp2Exp2 node)
    {
        defaultIn(node);
    }

    public void outAPlusExp2Exp2(APlusExp2Exp2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExp2Exp2(APlusExp2Exp2 node)
    {
        inAPlusExp2Exp2(node);
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusExp2Exp2(node);
    }

    public void inAMinusExp2Exp2(AMinusExp2Exp2 node)
    {
        defaultIn(node);
    }

    public void outAMinusExp2Exp2(AMinusExp2Exp2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExp2Exp2(AMinusExp2Exp2 node)
    {
        inAMinusExp2Exp2(node);
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusExp2Exp2(node);
    }

    public void inAEmptyExp2Exp2(AEmptyExp2Exp2 node)
    {
        defaultIn(node);
    }

    public void outAEmptyExp2Exp2(AEmptyExp2Exp2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyExp2Exp2(AEmptyExp2Exp2 node)
    {
        inAEmptyExp2Exp2(node);
        outAEmptyExp2Exp2(node);
    }

    public void inATermTerm(ATermTerm node)
    {
        defaultIn(node);
    }

    public void outATermTerm(ATermTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermTerm(ATermTerm node)
    {
        inATermTerm(node);
        if(node.getTerm2() != null)
        {
            node.getTerm2().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outATermTerm(node);
    }

    public void inAMultTerm2Term2(AMultTerm2Term2 node)
    {
        defaultIn(node);
    }

    public void outAMultTerm2Term2(AMultTerm2Term2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultTerm2Term2(AMultTerm2Term2 node)
    {
        inAMultTerm2Term2(node);
        if(node.getTerm2() != null)
        {
            node.getTerm2().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        outAMultTerm2Term2(node);
    }

    public void inADivTerm2Term2(ADivTerm2Term2 node)
    {
        defaultIn(node);
    }

    public void outADivTerm2Term2(ADivTerm2Term2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivTerm2Term2(ADivTerm2Term2 node)
    {
        inADivTerm2Term2(node);
        if(node.getTerm2() != null)
        {
            node.getTerm2().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        outADivTerm2Term2(node);
    }

    public void inAEmptyTerm2Term2(AEmptyTerm2Term2 node)
    {
        defaultIn(node);
    }

    public void outAEmptyTerm2Term2(AEmptyTerm2Term2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyTerm2Term2(AEmptyTerm2Term2 node)
    {
        inAEmptyTerm2Term2(node);
        outAEmptyTerm2Term2(node);
    }

    public void inANumFactorFactor(ANumFactorFactor node)
    {
        defaultIn(node);
    }

    public void outANumFactorFactor(ANumFactorFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumFactorFactor(ANumFactorFactor node)
    {
        inANumFactorFactor(node);
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        outANumFactorFactor(node);
    }

    public void inAExpFactorFactor(AExpFactorFactor node)
    {
        defaultIn(node);
    }

    public void outAExpFactorFactor(AExpFactorFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpFactorFactor(AExpFactorFactor node)
    {
        inAExpFactorFactor(node);
        if(node.getRightParenthesis() != null)
        {
            node.getRightParenthesis().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLeftParenthesis() != null)
        {
            node.getLeftParenthesis().apply(this);
        }
        outAExpFactorFactor(node);
    }
}
