/* This file was generated by SableCC (http://www.sablecc.org/). */

package gr.uoa.di.std08169.compilers.sablecc.node;

import gr.uoa.di.std08169.compilers.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AMultTerm2Term2 extends PTerm2
{
    private TMult _mult_;
    private PFactor _factor_;
    private PTerm2 _term2_;

    public AMultTerm2Term2()
    {
        // Constructor
    }

    public AMultTerm2Term2(
        @SuppressWarnings("hiding") TMult _mult_,
        @SuppressWarnings("hiding") PFactor _factor_,
        @SuppressWarnings("hiding") PTerm2 _term2_)
    {
        // Constructor
        setMult(_mult_);

        setFactor(_factor_);

        setTerm2(_term2_);

    }

    @Override
    public Object clone()
    {
        return new AMultTerm2Term2(
            cloneNode(this._mult_),
            cloneNode(this._factor_),
            cloneNode(this._term2_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMultTerm2Term2(this);
    }

    public TMult getMult()
    {
        return this._mult_;
    }

    public void setMult(TMult node)
    {
        if(this._mult_ != null)
        {
            this._mult_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._mult_ = node;
    }

    public PFactor getFactor()
    {
        return this._factor_;
    }

    public void setFactor(PFactor node)
    {
        if(this._factor_ != null)
        {
            this._factor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._factor_ = node;
    }

    public PTerm2 getTerm2()
    {
        return this._term2_;
    }

    public void setTerm2(PTerm2 node)
    {
        if(this._term2_ != null)
        {
            this._term2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._term2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._mult_)
            + toString(this._factor_)
            + toString(this._term2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._mult_ == child)
        {
            this._mult_ = null;
            return;
        }

        if(this._factor_ == child)
        {
            this._factor_ = null;
            return;
        }

        if(this._term2_ == child)
        {
            this._term2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._mult_ == oldChild)
        {
            setMult((TMult) newChild);
            return;
        }

        if(this._factor_ == oldChild)
        {
            setFactor((PFactor) newChild);
            return;
        }

        if(this._term2_ == oldChild)
        {
            setTerm2((PTerm2) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
